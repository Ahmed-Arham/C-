/*
50 C++ Programs Covering Basic Concepts Up to Functions


// 1. Hello World
#include <iostream>
using namespace std;
int main() {
    cout << "Hello World!";
    return 0;
}

// 2. Basic Input/Output
#include <iostream>
using namespace std;
int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;
    cout << "You entered: " << num;
    return 0;
}

// 3. Arithmetic Operations
#include <iostream>
using namespace std;
int main() {
    int a = 10, b = 5;
    cout << "Sum: " << a+b << endl;
    cout << "Difference: " << a-b << endl;
    cout << "Product: " << a*b << endl;
    cout << "Quotient: " << a/b;
    return 0;
}

// 4. If-Else Statement
#include <iostream>
using namespace std;
int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;
    if(num > 0) cout << "Positive";
    else if(num < 0) cout << "Negative";
    else cout << "Zero";
    return 0;
}

// 5. Switch Case
#include <iostream>
using namespace std;
int main() {
    char grade = 'B';
    switch(grade) {
        case 'A': cout << "Excellent"; break;
        case 'B': cout << "Good"; break;
        case 'C': cout << "Average"; break;
        default: cout << "Invalid grade";
    }
    return 0;
}

// 6. For Loop
#include <iostream>
using namespace std;
int main() {
    for(int i = 1; i <= 5; i++) {
        cout << i << " ";
    }
    return 0;
}

// 7. While Loop
#include <iostream>
using namespace std;
int main() {
    int i = 1;
    while(i <= 5) {
        cout << i << " ";
        i++;
    }
    return 0;
}

// 8. Do-While Loop
#include <iostream>
using namespace std;
int main() {
    int i = 1;
    do {
        cout << i << " ";
        i++;
    } while(i <= 5);
    return 0;
}

// 9. Array Basics
#include <iostream>
using namespace std;
int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    for(int i = 0; i < 5; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}

// 10. Sum of Array Elements
#include <iostream>
using namespace std;
int main() {
    int arr[5] = {1, 2, 3, 4, 5}, sum = 0;
    for(int i = 0; i < 5; i++) {
        sum += arr[i];
    }
    cout << "Sum: " << sum;
    return 0;
}

// 11. Find Maximum in Array
#include <iostream>
using namespace std;
int main() {
    int arr[5] = {12, 45, 23, 67, 34};
    int max = arr[0];
    for(int i = 1; i < 5; i++) {
        if(arr[i] > max) max = arr[i];
    }
    cout << "Maximum: " << max;
    return 0;
}

// 12. Linear Search
#include <iostream>
using namespace std;
int main() {
    int arr[5] = {10, 20, 30, 40, 50};
    int key = 30, found = 0;
    for(int i = 0; i < 5; i++) {
        if(arr[i] == key) {
            found = 1;
            cout << "Found at index " << i;
            break;
        }
    }
    if(!found) cout << "Not found";
    return 0;
}

// 13. Bubble Sort
#include <iostream>
using namespace std;
int main() {
    int arr[5] = {5, 4, 3, 2, 1};
    for(int i = 0; i < 4; i++) {
        for(int j = 0; j < 4-i; j++) {
            if(arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
    for(int i = 0; i < 5; i++) {
        cout << arr[i] << " ";
    }
    return 0;
}

// 14. 2D Array
#include <iostream>
using namespace std;
int main() {
    int matrix[2][2] = {{1, 2}, {3, 4}};
    for(int i = 0; i < 2; i++) {
        for(int j = 0; j < 2; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
    return 0;
}

// 15. String Basics
#include <iostream>
#include <string>
using namespace std;
int main() {
    string name = "John";
    cout << "Name: " << name;
    return 0;
}

// 16. String Length
#include <iostream>
#include <string>
using namespace std;
int main() {
    string str = "Hello";
    cout << "Length: " << str.length();
    return 0;
}

// 17. String Concatenation
#include <iostream>
#include <string>
using namespace std;
int main() {
    string str1 = "Hello", str2 = "World";
    cout << str1 + " " + str2;
    return 0;
}

// 18. String Comparison
#include <iostream>
#include <string>
using namespace std;
int main() {
    string str1 = "apple", str2 = "banana";
    if(str1 == str2) cout << "Equal";
    else cout << "Not equal";
    return 0;
}

// 19. String Substring
#include <iostream>
#include <string>
using namespace std;
int main() {
    string str = "Programming";
    cout << str.substr(3, 4);
    return 0;
}

// 20. Pointer Basics
#include <iostream>
using namespace std;
int main() {
    int num = 10;
    int *ptr = &num;
    cout << "Value: " << *ptr << endl;
    cout << "Address: " << ptr;
    return 0;
}

// 21. Pointer Arithmetic
#include <iostream>
using namespace std;
int main() {
    int arr[3] = {10, 20, 30};
    int *ptr = arr;
    for(int i = 0; i < 3; i++) {
        cout << *(ptr + i) << " ";
    }
    return 0;
}

// 22. Dynamic Memory Allocation
#include <iostream>
using namespace std;
int main() {
    int *ptr = new int;
    *ptr = 5;
    cout << *ptr;
    delete ptr;
    return 0;
}

// 23. Dynamic Array
#include <iostream>
using namespace std;
int main() {
    int size = 5;
    int *arr = new int[size];
    for(int i = 0; i < size; i++) {
        arr[i] = i+1;
    }
    for(int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    delete[] arr;
    return 0;
}

// 24. Reference Variable
#include <iostream>
using namespace std;
int main() {
    int num = 5;
    int &ref = num;
    cout << "Original: " << num << endl;
    ref = 10;
    cout << "After change: " << num;
    return 0;
}

// 25. Function - No parameters, no return
#include <iostream>
using namespace std;
void greet() {
    cout << "Hello!";
}
int main() {
    greet();
    return 0;
}

// 26. Function - With parameters
#include <iostream>
using namespace std;
void printSum(int a, int b) {
    cout << "Sum: " << a + b;
}
int main() {
    printSum(5, 3);
    return 0;
}

// 27. Function - Return value
#include <iostream>
using namespace std;
int add(int a, int b) {
    return a + b;
}
int main() {
    int result = add(5, 3);
    cout << "Result: " << result;
    return 0;
}

// 28. Function - Default arguments
#include <iostream>
using namespace std;
void print(int num = 5) {
    cout << "Number: " << num;
}
int main() {
    print();    // Uses default
    print(10);  // Overrides default
    return 0;
}

// 29. Function - Pass by value
#include <iostream>
using namespace std;
void change(int num) {
    num = 10;
}
int main() {
    int num = 5;
    change(num);
    cout << "Value remains: " << num;
    return 0;
}

// 30. Function - Pass by reference
#include <iostream>
using namespace std;
void change(int &num) {
    num = 10;
}
int main() {
    int num = 5;
    change(num);
    cout << "Value changed: " << num;
    return 0;
}

// 31. Function - Pass array to function
#include <iostream>
using namespace std;
void printArray(int arr[], int size) {
    for(int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
}
int main() {
    int arr[5] = {1, 2, 3, 4, 5};
    printArray(arr, 5);
    return 0;
}

// 32. Function - Return array from function
#include <iostream>
using namespace std;
int* createArray() {
    static int arr[3] = {1, 2, 3};
    return arr;
}
int main() {
    int *ptr = createArray();
    for(int i = 0; i < 3; i++) {
        cout << ptr[i] << " ";
    }
    return 0;
}

// 33. Function - Recursion (Factorial)
#include <iostream>
using namespace std;
int factorial(int n) {
    if(n == 0) return 1;
    return n * factorial(n-1);
}
int main() {
    cout << "Factorial of 5: " << factorial(5);
    return 0;
}

// 34. Function - Recursion (Fibonacci)
#include <iostream>
using namespace std;
int fibonacci(int n) {
    if(n <= 1) return n;
    return fibonacci(n-1) + fibonacci(n-2);
}
int main() {
    cout << "Fibonacci(5): " << fibonacci(5);
    return 0;
}

// 35. Function Overloading
#include <iostream>
using namespace std;
void print(int num) {
    cout << "Integer: " << num << endl;
}
void print(double num) {
    cout << "Double: " << num << endl;
}
int main() {
    print(5);
    print(5.5);
    return 0;
}

// 36. Inline Function
#include <iostream>
using namespace std;
inline int square(int x) {
    return x * x;
}
int main() {
    cout << "Square of 5: " << square(5);
    return 0;
}

// 37. Math Functions
#include <iostream>
#include <cmath>
using namespace std;
int main() {
    cout << "Square root of 16: " << sqrt(16) << endl;
    cout << "Power 2^3: " << pow(2, 3) << endl;
    cout << "Absolute of -5: " << abs(-5);
    return 0;
}

// 38. Time Function
#include <iostream>
#include <ctime>
using namespace std;
int main() {
    time_t now = time(0);
    char* dt = ctime(&now);
    cout << "Current time: " << dt;
    return 0;
}

// 39. Random Numbers
#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;
int main() {
    srand(time(0));
    cout << "Random number: " << rand() % 100;
    return 0;
}

// 40. Structure Basics
#include <iostream>
using namespace std;
struct Person {
    string name;
    int age;
};
int main() {
    Person p = {"John", 25};
    cout << p.name << " is " << p.age << " years old";
    return 0;
}

// 41. Structure with Function
#include <iostream>
using namespace std;
struct Rectangle {
    int length, width;
};
int area(Rectangle r) {
    return r.length * r.width;
}
int main() {
    Rectangle rect = {5, 3};
    cout << "Area: " << area(rect);
    return 0;
}

// 42. Enumeration
#include <iostream>
using namespace std;
enum Week {Sun, Mon, Tue, Wed, Thu, Fri, Sat};
int main() {
    Week today = Wed;
    cout << "Today is day " << today + 1;
    return 0;
}

// 43. File Handling - Write
#include <iostream>
#include <fstream>
using namespace std;
int main() {
    ofstream file("example.txt");
    file << "Writing to a file.";
    file.close();
    cout << "File written successfully";
    return 0;
}

// 44. File Handling - Read
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main() {
    string line;
    ifstream file("example.txt");
    if(file.is_open()) {
        while(getline(file, line)) {
            cout << line;
        }
        file.close();
    }
    return 0;
}

// 45. Exception Handling
#include <iostream>
using namespace std;
int main() {
    try {
        int age = 15;
        if(age < 18) {
            throw "Age must be at least 18";
        }
    }
    catch(const char* msg) {
        cout << "Error: " << msg;
    }
    return 0;
}

// 46. Template Function
#include <iostream>
using namespace std;
template <typename T>
T add(T a, T b) {
    return a + b;
}
int main() {
    cout << "Int sum: " << add(5, 3) << endl;
    cout << "Double sum: " << add(5.5, 3.2);
    return 0;
}

// 47. Namespace
#include <iostream>
using namespace std;
namespace first {
    int value = 5;
}
namespace second {
    int value = 10;
}
int main() {
    cout << "First value: " << first::value << endl;
    cout << "Second value: " << second::value;
    return 0;
}

// 48. Command Line Arguments
#include <iostream>
using namespace std;
int main(int argc, char* argv[]) {
    cout << "Number of arguments: " << argc << endl;
    for(int i = 0; i < argc; i++) {
        cout << "Argument " << i << ": " << argv[i] << endl;
    }
    return 0;
}

// 49. Lambda Function
#include <iostream>
using namespace std;
int main() {
    auto sum = [](int a, int b) { return a + b; };
    cout << "Sum: " << sum(5, 3);
    return 0;
}

// 50. Function Pointer
#include <iostream>
using namespace std;
int add(int a, int b) {
    return a + b;
}
int main() {
    int (*funcPtr)(int, int) = add;
    cout << "Sum: " << funcPtr(5, 3);
    return 0;
}
